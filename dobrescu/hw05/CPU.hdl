// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=instrA);
    And(a=instruction[15], b=instruction[5], out=aALU);
    Mux16(a=instruction, b=ALUout, sel=aALU, out=inpA);
    Or(a=instrA, b=aALU, out=loadA);
    ARegister(in=inpA, load=loadA, out=regA);

    Mux16(a=regA, b=inM, sel=instruction[12], out=ALUin);
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=regD);
    ALU(x=regD, y=ALUin, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=ALUout, zr=ALUzr, ng=ALUng);  

    Or16(a=false, b=regA, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    And(a=instruction[15], b=instruction[3], out=writeM);
    And(a=ALUng, b=instruction[2], out=JLT);
    And(a=ALUzr, b=instruction[1], out=JEQ);     
    Or(a=ALUng, b=ALUzr, out=out1);        
    Not(in=out1, out=poz);            
    And(a=poz, b=instruction[0], out=JGT); 
    Or(a=JLT, b=JEQ, out=JLE);                  
    Or(a=JGT, b=JLE, out=jump);              
    And(a=instruction[15], b=jump, out=loadPC);  

    Not(in=loadPC, out=incrementPC);
    PC(in=regA, inc=true, load=loadPC, reset=reset, out[0..14]=pc);
}