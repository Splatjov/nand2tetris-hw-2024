// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl

/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */

CHIP CPU {

    IN  inM[16],         // M value input (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to reinitialize the program counter

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Not(in=instruction[15], out=isA);
    Not(in=isA, out=isC);

    And(a=isC, b=instruction[5], out=loadA);
    Or(a=isA, b=loadA, out=aLoad);
    Mux16(a=instruction, b=aluOut, sel=loadA, out=aMux);
    ARegister(in=aMux, load=aLoad, out=aOut, out[0..14]=addressM);

    And(a=isC, b=instruction[4], out=dLoad);
    DRegister(in=aluOut, load=dLoad, out=dOut);

    Mux16(a=aOut, b=inM, sel=instruction[12], out=aluY);

    ALU(
        x=dOut,
        y=aluY,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut,
        out=outM,
        zr=zero,
        ng=neg
    );

    Not(in=neg, out=posCheck);
    Not(in=zero, out=nonZero);
    And(a=posCheck, b=nonZero, out=pos);

    And(a=isC, b=instruction[3], out=writeM);

    And(a=pos, b=instruction[0], out=gt);
    And(a=zero, b=instruction[1], out=eq);
    And(a=neg, b=instruction[2], out=lt);

    Or(a=eq, b=lt, out=le);
    Or(a=le, b=gt, out=jump);
    And(a=isC, b=jump, out=pcLoad);
    PC(in=aOut, inc=true, load=pcLoad, reset=reset, out[0..14]=pc);
}
