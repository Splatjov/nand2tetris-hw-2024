// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Or(a=instruction[15], out=isC);
    Not(in=isC, out=isA);
	
    And(a=isC, b=instruction[4], out=writeD);
    DRegister(in=alu, load=writeD, out=d);
    
    Or(a=isA, b=instruction[5], out=writeA);
    Mux16(a=alu, b[0..14]=instruction[0..14], sel=isA, out=ain);
    ARegister(in=ain, load=writeA, out=a);

    Mux16(a=a, b=inM, sel=instruction[12], out=aorm);
    ALU(
        x=d,
        y=aorm,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=alu,
        zr=zr,
        ng=ng,
    );

    Or(a=zr, b=ng, out=le);
    Not(in=le, out=gt);

    And(a=instruction[2], b=ng, out=jlt);
    And(a=instruction[1], b=zr, out=jeq);
    And(a=instruction[0], b=gt, out=jgt);
    Or8Way(in[0]=jlt, in[1]=jeq, in[2]=jgt, out=jmp);
    And(a=isC, b=jmp, out=doJmp);

    PC(in=a, load=doJmp, inc=true, reset=reset, out[0..14]=pc);

    Or16(a=alu, out=outM);
    Or16(a=a, out[0..14]=addressM);
    And(a=isC, b=instruction[3], out=writeM);
}